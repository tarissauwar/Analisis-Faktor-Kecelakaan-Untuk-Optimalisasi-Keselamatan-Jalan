# -*- coding: utf-8 -*-
"""202110370311248_Data Mining_Eksperimen 2 Class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h3SQ-X_pdoBThSSp9ab56PE0oLvneU72

LINK KAGGLE : https://www.google.com/url?q=https%3A%2F%2Fwww.kaggle.com%2Fdatasets%2Fsaurabhshahane%2Froad-traffic-accidents
"""

!pip install gdown
!gdown --id 1ets9yMN-RUpCiXcAnjOnwwDgYAtJ4WGw

"""# Memuat Library"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from IPython.display import display
from sklearn.preprocessing import LabelEncoder
from imblearn.over_sampling import RandomOverSampler
from matplotlib.ticker import FixedLocator
from sklearn.feature_selection import chi2, SelectKBest
from sklearn.model_selection import train_test_split, cross_val_score
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE

# Membaca dataset
df = pd.read_csv('Target_Data.csv')

# Menampilkan 5 data teratas
df.head()

"""# 1. EDA

## Analisis Statistik
"""

df.describe()

"""## Distribusi Data

###original data
"""

# Menggabungkan kelas 'Fatal injury' dan 'Serious Injury' menjadi 'Severe Injury' pada kolom 'Accident_severity'
df['Accident_severity'] = df['Accident_severity'].replace({'Fatal injury': 'Severe Injury', 'Serious Injury': 'Severe Injury'})

# Menampilkan distribusi baru untuk kolom 'Accident_severity'
print("\nDistribusi Kategori untuk Kolom 'Accident_severity' setelah penggabungan kelas:")
print(df['Accident_severity'].value_counts())

# Visualisasi Distribusi Kategori untuk kolom 'Accident_severity' setelah penggabungan kelas
plt.figure(figsize=(8, 6))
sns.countplot(x='Accident_severity', data=df)
plt.title('Distribusi Kategori untuk Kolom Accident_severity setelah penggabungan kelas')
plt.xlabel('Accident_severity')
plt.ylabel('Jumlah')
plt.xticks(rotation=45)
plt.show()

# Menyimpan dataset yang sudah dibersihkan ke dalam bentuk file CSV
df.to_csv('cleaned_data.csv', index=False)

"""###resampled data"""

# Load Data
df = pd.read_csv('Target_Data.csv')

# Menggabungkan kelas 'Fatal injury' dan 'Serious Injury' menjadi 'Severe Injury' pada kolom 'Accident_severity'
df['Accident_severity'] = df['Accident_severity'].replace({'Fatal injury': 'Severe Injury', 'Serious Injury': 'Severe Injury'})

# Encode Target Variable (assuming 'Accident_severity' is the target variable)
label_encoder = LabelEncoder()
df['Accident_severity_encoded'] = label_encoder.fit_transform(df['Accident_severity'])

# Mapping encoded labels back to original categories for interpretation
label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))
reverse_label_mapping = {v: k for k, v in label_mapping.items()}

# Separate features and target
features = df.drop(columns=['Accident_severity', 'Accident_severity_encoded'])
target = df['Accident_severity_encoded']

# Resample Data
ros = RandomOverSampler(random_state=42)
features_resampled, target_resampled = ros.fit_resample(features, target)

# Print initial target distribution
print("\nDistribusi Data Sebelum Resampling:")
print(target.value_counts().rename(index=reverse_label_mapping))

# Print resampled target distribution
print("\nDistribusi Data Setelah Resampling:")
print(pd.Series(target_resampled).value_counts().rename(index=reverse_label_mapping))

# Visualize the differences
fig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)
sns.countplot(x=target, ax=axes[0])
axes[0].set_title('Sebelum Resampling')
axes[0].set_xlabel('Kelas Target')
axes[0].set_ylabel('Jumlah')
axes[0].xaxis.set_major_locator(FixedLocator(sorted(reverse_label_mapping.keys())))
axes[0].xaxis.set_major_formatter(plt.FixedFormatter([reverse_label_mapping[i] for i in sorted(reverse_label_mapping.keys())]))

sns.countplot(x=target_resampled, ax=axes[1])
axes[1].set_title('Setelah Resampling')
axes[1].set_xlabel('Kelas Target')
axes[1].set_ylabel('Jumlah')
axes[1].xaxis.set_major_locator(FixedLocator(sorted(reverse_label_mapping.keys())))
axes[1].xaxis.set_major_formatter(plt.FixedFormatter([reverse_label_mapping[i] for i in sorted(reverse_label_mapping.keys())]))

plt.tight_layout()
plt.show()

"""# Preprocessing Data

## Data cleaning (and/or data correcting)

###before
"""

# Menampilkan informasi awal tentang dataset
print("Informasi awal tentang dataset:")
display(df.info())

# Memeriksa apakah ada Missing Value
missing_value = pd.isnull(df).sum()

print("\nMissing Value pada setiap Kolom:")
display(pd.DataFrame(missing_value, columns=['Jumlah Missing Value']))

"""Interpretasi : Dataset ini terdiri dari 12.316 entri (baris) dan 12 kolom. Semua kolom memiliki tipe data 'object', yang umumnya menunjukkan data kategorikal. Nilai yang hilang pada kolom-kolom seperti 'Educational_level', 'Driving_experience', 'Types_of_Junction', 'Road_surface_type', dan 'Vehicle_movement' perlu diatasi dengan melakukan analisis lebih lanjut.

###after
"""

# Membaca dataset
df = pd.read_csv('Target_Data.csv')

# Menghapus baris yang memiliki Missing Value
df_cleaned = df.dropna()

# Menampilkan informasi tentang dataset setelah handling Missing Value
print("\nInformasi tentang dataset setelah handling Missing Value:")
display(df_cleaned.info())

# Menampilkan dataset setelah handling Missing Value
print("\nDataset setelah handling Missing Value:")
display(df_cleaned.head())

# Menyimpan dataset yang sudah dibersihkan ke dalam bentuk file CSV
df_cleaned.to_csv('cleaned_data.csv', index=False)

"""Interpretasi : Dataset ini kini memiliki 10.087 entri (baris) dan 12 kolom. Semua kolom memiliki tipe data object, menunjukkan bahwa dataset ini masih terdiri dari data kategorikal. Semua kolom telah diisi dengan data setelah penanganan missing value, sehingga tidak ada nilai yang kosong lagi. Dataset ini siap untuk tahap analisis lanjutan, seperti visualisasi dan pemodelan, setelah memastikan tidak ada lagi nilai yang hilang yang perlu diperhatikan.

# Data Transformation

###before
"""

# Read the cleaned dataset
df_cleaned = pd.read_csv('cleaned_data.csv')

# Display the cleaned dataset before transformation
print("Dataset sebelum transformasi:")
display(df_cleaned.head())

"""Interpretasi : Dataset ini menampilkan lima baris pertama dari dataset yang telah dibersihkan sebelum proses transformasi. Data ini telah melalui tahap penanganan nilai yang hilang, dan siap untuk tahap analisis lebih lanjut seperti transformasi data, visualisasi, atau pemodelan

###after
"""

# Membaca dataset dari reduced_data.csv
df_cleaned = pd.read_csv('cleaned_data.csv')

# Membuat salinan dari df_cleaned untuk menyimpan hasil transformasi
df_transformed = df_cleaned.copy()

# Membuat objek LabelEncoder
label_encoder = LabelEncoder()

# Melakukan transformasi pada kolom yang bertipe objek
for column in df_transformed.select_dtypes(include=['object']).columns:
    df_transformed[column] = label_encoder.fit_transform(df_transformed[column])

# Memeriksa hasil transformasi
display(df_transformed.head())

# Menyimpan hasil transformasi ke dalam file CSV
df_transformed.to_csv('transformed_data.csv', index=False)

"""Interpretasi : Dataset yang ditampilkan merupakan hasil dari transformasi menggunakan 'LabelEncoder' pada kolom-kolom yang bertipe data 'objek'. Proses ini mengubah nilai-nilai kategorikal menjadi nilai numerik untuk memudahkan analisis lebih lanjut.

# Feature Selection
"""

# Define features and target
X = df_transformed.drop('Accident_severity', axis=1)
y = df_transformed['Accident_severity']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Chi2"""

# 1 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=1)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_1 = df_transformed.loc[:, selected_features]
chi2_1 = chi2_1.copy()
chi2_1['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_1.head()

# 2 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=2)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_2 = df_transformed.loc[:, selected_features]
chi2_2 = chi2_2.copy()
chi2_2['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_2.head()

# 3 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=3)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_3 = df_transformed.loc[:, selected_features]
chi2_3 = chi2_3.copy()
chi2_3['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_3.head()

# 4 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=4)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_4 = df_transformed.loc[:, selected_features]
chi2_4 = chi2_4.copy()
chi2_4['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_4.head()

# 5 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=5)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_5 = df_transformed.loc[:, selected_features]
chi2_5 = chi2_5.copy()
chi2_5['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_5.head()

# 6 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=6)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_6 = df_transformed.loc[:, selected_features]
chi2_6 = chi2_6.copy()
chi2_6['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_6.head()

# 7 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=7)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_7 = df_transformed.loc[:, selected_features]
chi2_7 = chi2_7.copy()
chi2_7['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_7.head()

# 8 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=8)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_8 = df_transformed.loc[:, selected_features]
chi2_8 = chi2_8.copy()
chi2_8['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_8.head()

# 9 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=9)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_9 = df_transformed.loc[:, selected_features]
chi2_9 = chi2_9.copy()
chi2_9['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_9.head()

# 10 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=10)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_10 = df_transformed.loc[:, selected_features]
chi2_10 = chi2_10.copy()
chi2_10['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_10.head()

# 11 Fitur

# Perform Chi-Square test
chi2_selector = SelectKBest(chi2, k=11)
X_kbest = chi2_selector.fit_transform(X_train, y_train)

# Get selected feature names
selected_features = X.columns[chi2_selector.get_support()]

print("Chi-Square selected features:", selected_features)

# Transform dataset based on selected features from one of the methods
chi2_11 = df_transformed.loc[:, selected_features]
chi2_11 = chi2_11.copy()
chi2_11['Accident_severity'] = y

# Display the head of the transformed dataset
chi2_11.head()

"""## XGBoost

### SFS
"""

# 1 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=1,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_1 = df_transformed.loc[:, selected_features]
sfs_xgbc_1 = sfs_xgbc_1.copy()
sfs_xgbc_1['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_1.head()

# 2 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=2,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_2 = df_transformed.loc[:, selected_features]
sfs_xgbc_2 = sfs_xgbc_2.copy()
sfs_xgbc_2['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_2.head()

# 3 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=3,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_3 = df_transformed.loc[:, selected_features]
sfs_xgbc_3 = sfs_xgbc_3.copy()
sfs_xgbc_3['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_3.head()

# 4 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=4,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_4 = df_transformed.loc[:, selected_features]
sfs_xgbc_4 = sfs_xgbc_4.copy()
sfs_xgbc_4['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_4.head()

# 5 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=5,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_5 = df_transformed.loc[:, selected_features]
sfs_xgbc_5 = sfs_xgbc_5.copy()
sfs_xgbc_5['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_5.head()

# 6 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=6,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_6 = df_transformed.loc[:, selected_features]
sfs_xgbc_6 = sfs_xgbc_6.copy()
sfs_xgbc_6['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_6.head()

# 7 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=7,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_7 = df_transformed.loc[:, selected_features]
sfs_xgbc_7 = sfs_xgbc_7.copy()
sfs_xgbc_7['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_7.head()

# 8 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=8,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_8 = df_transformed.loc[:, selected_features]
sfs_xgbc_8 = sfs_xgbc_8.copy()
sfs_xgbc_8['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_8.head()

# 9 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=9,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_9 = df_transformed.loc[:, selected_features]
sfs_xgbc_9 = sfs_xgbc_9.copy()
sfs_xgbc_9['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_9.head()

# 10 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=10,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_10 = df_transformed.loc[:, selected_features]
sfs_xgbc_10 = sfs_xgbc_10.copy()
sfs_xgbc_10['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_10.head()

# 11 Fitur

# Create an XGBoost model
xgb = XGBClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(xgb,
                  k_features=11,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_xgbc_11 = df_transformed.loc[:, selected_features]
sfs_xgbc_11 = sfs_xgbc_11.copy()
sfs_xgbc_11['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_xgbc_11.head()

"""### SBS"""

# 1 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=1,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_1 = df_transformed.loc[:, selected_features]
sbs_xgb_1 = sbs_xgb_1.copy()
sbs_xgb_1['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_1.head()

# 2 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=2,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_2 = df_transformed.loc[:, selected_features]
sbs_xgb_2 = sbs_xgb_2.copy()
sbs_xgb_2['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_2.head()

# 3 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=3,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_3 = df_transformed.loc[:, selected_features]
sbs_xgb_3 = sbs_xgb_3.copy()
sbs_xgb_3['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_3.head()

# 4 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=4,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_4 = df_transformed.loc[:, selected_features]
sbs_xgb_4 = sbs_xgb_4.copy()
sbs_xgb_4['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_4.head()

# 5 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=5,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_5 = df_transformed.loc[:, selected_features]
sbs_xgb_5 = sbs_xgb_5.copy()
sbs_xgb_5['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_5.head()

# 6 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=6,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_6 = df_transformed.loc[:, selected_features]
sbs_xgb_6 = sbs_xgb_6.copy()
sbs_xgb_6['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_6.head()

# 7 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=7,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_7 = df_transformed.loc[:, selected_features]
sbs_xgb_7 = sbs_xgb_7.copy()
sbs_xgb_7['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_7.head()

# 8 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=8,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_8 = df_transformed.loc[:, selected_features]
sbs_xgb_8 = sbs_xgb_8.copy()
sbs_xgb_8['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_8.head()

# 9 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=9,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_9 = df_transformed.loc[:, selected_features]
sbs_xgb_9 = sbs_xgb_9.copy()
sbs_xgb_9['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_9.head()

# 10 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=10,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_10 = df_transformed.loc[:, selected_features]
sbs_xgb_10 = sbs_xgb_10.copy()
sbs_xgb_10['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_10.head()

# 11 Fitur

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(xgb,
                   k_features=11,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_xgb_11 = df_transformed.loc[:, selected_features]
sbs_xgb_11 = sbs_xgb_11.copy()
sbs_xgb_11['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_xgb_11.head()

"""## Random Forest

### SFS
"""

# 1 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=1,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_1 = df_transformed.loc[:, selected_features]
sfs_rf_1 = sfs_rf_1.copy()
sfs_rf_1['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_1.head()

# 2 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=2,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_2 = df_transformed.loc[:, selected_features]
sfs_rf_2 = sfs_rf_2.copy()
sfs_rf_2['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_2.head()

# 3 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=3,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_3 = df_transformed.loc[:, selected_features]
sfs_rf_3 = sfs_rf_3.copy()
sfs_rf_3['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_3.head()

# 4 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=4,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_4 = df_transformed.loc[:, selected_features]
sfs_rf_4 = sfs_rf_4.copy()
sfs_rf_4['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_4.head()

# 5 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=5,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_5 = df_transformed.loc[:, selected_features]
sfs_rf_5 = sfs_rf_5.copy()
sfs_rf_5['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_5.head()

# 6 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=6,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_6 = df_transformed.loc[:, selected_features]
sfs_rf_6 = sfs_rf_6.copy()
sfs_rf_6['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_6.head()

# 7 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=7,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_7 = df_transformed.loc[:, selected_features]
sfs_rf_7 = sfs_rf_7.copy()
sfs_rf_7['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_7.head()

# 8 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=8,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_8 = df_transformed.loc[:, selected_features]
sfs_rf_8 = sfs_rf_8.copy()
sfs_rf_8['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_8.head()

# 9 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=9,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_9 = df_transformed.loc[:, selected_features]
sfs_rf_9 = sfs_rf_9.copy()
sfs_rf_9['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_9.head()

# 10 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=10,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_10 = df_transformed.loc[:, selected_features]
sfs_rf_10 = sfs_rf_10.copy()
sfs_rf_10['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_10.head()

# 11 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(rf,
                  k_features=11,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_rf_11 = df_transformed.loc[:, selected_features]
sfs_rf_11 = sfs_rf_11.copy()
sfs_rf_11['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_rf_11.head()

"""### SBS


"""

# 1 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=1,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_1 = df_transformed.loc[:, selected_features]
sbs_rf_1 = sbs_rf_1.copy()
sbs_rf_1['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_1.head()

# 2 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=2,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_2 = df_transformed.loc[:, selected_features]
sbs_rf_2 = sbs_rf_2.copy()
sbs_rf_2['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_2.head()

# 3 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=3,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_3 = df_transformed.loc[:, selected_features]
sbs_rf_3 = sbs_rf_3.copy()
sbs_rf_3['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_3.head()

# 4 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=4,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_4 = df_transformed.loc[:, selected_features]
sbs_rf_4 = sbs_rf_4.copy()
sbs_rf_4['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_4.head()

# 5 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=5,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_5 = df_transformed.loc[:, selected_features]
sbs_rf_5 = sbs_rf_5.copy()
sbs_rf_5['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_5.head()

# 6 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=6,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_6 = df_transformed.loc[:, selected_features]
sbs_rf_6 = sbs_rf_6.copy()
sbs_rf_6['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_6.head()

# 7 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=7,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_7 = df_transformed.loc[:, selected_features]
sbs_rf_7 = sbs_rf_7.copy()
sbs_rf_7['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_7.head()

# 8 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=8,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_8 = df_transformed.loc[:, selected_features]
sbs_rf_8 = sbs_rf_8.copy()
sbs_rf_8['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_8.head()

# 9 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=9,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_9 = df_transformed.loc[:, selected_features]
sbs_rf_9 = sbs_rf_9.copy()
sbs_rf_9['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_9.head()

# 10 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=10,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_10 = df_transformed.loc[:, selected_features]
sbs_rf_10 = sbs_rf_10.copy()
sbs_rf_10['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_10.head()

# 11 Fitur

# Create a Random Forest model
rf = RandomForestClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(rf,
                   k_features=11,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_rf_11 = df_transformed.loc[:, selected_features]
sbs_rf_11 = sbs_rf_11.copy()
sbs_rf_11['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_rf_11.head()

"""## Decision Tree

### SFS
"""

# 1 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=1,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_1 = df_transformed.loc[:, selected_features]
sfs_dt_1 = sfs_dt_1.copy()
sfs_dt_1['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_1.head()

# 2 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=2,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_2 = df_transformed.loc[:, selected_features]
sfs_dt_2 = sfs_dt_2.copy()
sfs_dt_2['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_2.head()

# 3 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=3,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_3 = df_transformed.loc[:, selected_features]
sfs_dt_3 = sfs_dt_3.copy()
sfs_dt_3['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_3.head()

# 4 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=4,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_4 = df_transformed.loc[:, selected_features]
sfs_dt_4 = sfs_dt_4.copy()
sfs_dt_4['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_4.head()

# 5 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=5,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_5 = df_transformed.loc[:, selected_features]
sfs_dt_5 = sfs_dt_5.copy()
sfs_dt_5['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_5.head()

# 6 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=6,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_6 = df_transformed.loc[:, selected_features]
sfs_dt_6 = sfs_dt_6.copy()
sfs_dt_6['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_6.head()

# 7 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=7,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_7 = df_transformed.loc[:, selected_features]
sfs_dt_7 = sfs_dt_7.copy()
sfs_dt_7['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_7.head()

# 8 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=8,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_8 = df_transformed.loc[:, selected_features]
sfs_dt_8 = sfs_dt_8.copy()
sfs_dt_8['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_8.head()

# 9 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=9,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_9 = df_transformed.loc[:, selected_features]
sfs_dt_9 = sfs_dt_9.copy()
sfs_dt_9['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_9.head()

# 10 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=10,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_10 = df_transformed.loc[:, selected_features]
sfs_dt_10 = sfs_dt_10.copy()
sfs_dt_10['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_10.head()

# 11 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(dt,
                  k_features=11,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_dt_11 = df_transformed.loc[:, selected_features]
sfs_dt_11 = sfs_dt_11.copy()
sfs_dt_11['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_dt_11.head()

"""### SBS"""

# 1 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=1,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_1 = df_transformed.loc[:, selected_features]
sbs_dt_1 = sbs_dt_1.copy()
sbs_dt_1['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_1.head()

# 2 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=2,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_2 = df_transformed.loc[:, selected_features]
sbs_dt_2 = sbs_dt_2.copy()
sbs_dt_2['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_2.head()

# 3 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=3,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_3 = df_transformed.loc[:, selected_features]
sbs_dt_3 = sbs_dt_3.copy()
sbs_dt_3['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_3.head()

# 4 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=4,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_4 = df_transformed.loc[:, selected_features]
sbs_dt_4 = sbs_dt_4.copy()
sbs_dt_4['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_4.head()

# 5 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=5,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_5 = df_transformed.loc[:, selected_features]
sbs_dt_5 = sbs_dt_5.copy()
sbs_dt_5['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_5.head()

# 6 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=6,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_6 = df_transformed.loc[:, selected_features]
sbs_dt_6 = sbs_dt_6.copy()
sbs_dt_6['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_6.head()

# 7 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=7,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_7 = df_transformed.loc[:, selected_features]
sbs_dt_7 = sbs_dt_7.copy()
sbs_dt_7['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_7.head()

# 8 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=8,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_8 = df_transformed.loc[:, selected_features]
sbs_dt_8 = sbs_dt_8.copy()
sbs_dt_8['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_8.head()

# 9 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=9,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_9 = df_transformed.loc[:, selected_features]
sbs_dt_9 = sbs_dt_9.copy()
sbs_dt_9['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_9.head()

# 10 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=10,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_10 = df_transformed.loc[:, selected_features]
sbs_dt_10 = sbs_dt_10.copy()
sbs_dt_10['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_10.head()

# 11 Fitur

# Create a Decision Tree model
dt = DecisionTreeClassifier()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(dt,
                   k_features=11,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_dt_11 = df_transformed.loc[:, selected_features]
sbs_dt_11 = sbs_dt_11.copy()
sbs_dt_11['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_dt_11.head()

"""## Naive Bayes

### SFS
"""

# 1 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=1,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_1 = df_transformed.loc[:, selected_features]
sfs_nb_1 = sfs_nb_1.copy()
sfs_nb_1['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_1.head()

# 2 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=2,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_2 = df_transformed.loc[:, selected_features]
sfs_nb_2 = sfs_nb_2.copy()
sfs_nb_2['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_2.head()

# 3 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=3,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_3 = df_transformed.loc[:, selected_features]
sfs_nb_3 = sfs_nb_3.copy()
sfs_nb_3['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_3.head()

# 4 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=4,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_4 = df_transformed.loc[:, selected_features]
sfs_nb_4 = sfs_nb_4.copy()
sfs_nb_4['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_4.head()

# 5 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=5,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_5 = df_transformed.loc[:, selected_features]
sfs_nb_5 = sfs_nb_5.copy()
sfs_nb_5['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_5.head()

# 6 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=6,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_6 = df_transformed.loc[:, selected_features]
sfs_nb_6 = sfs_nb_6.copy()
sfs_nb_6['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_6.head()

# 7 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=7,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_7 = df_transformed.loc[:, selected_features]
sfs_nb_7 = sfs_nb_7.copy()
sfs_nb_7['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_7.head()

# 8 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=8,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_8 = df_transformed.loc[:, selected_features]
sfs_nb_8 = sfs_nb_8.copy()
sfs_nb_8['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_8.head()

# 9 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=9,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_9 = df_transformed.loc[:, selected_features]
sfs_nb_9 = sfs_nb_9.copy()
sfs_nb_9['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_9.head()

# 10 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=10,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_10 = df_transformed.loc[:, selected_features]
sfs_nb_10 = sfs_nb_10.copy()
sfs_nb_10['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_10.head()

# 11 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(nb,
                  k_features=11,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_nb_11 = df_transformed.loc[:, selected_features]
sfs_nb_11 = sfs_nb_11.copy()
sfs_nb_11['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_nb_11.head()

"""### SBS"""

# 1 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=1,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_1 = df_transformed.loc[:, selected_features]
sbs_nb_1 = sbs_nb_1.copy()
sbs_nb_1['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_1.head()

# 2 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=2,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_2 = df_transformed.loc[:, selected_features]
sbs_nb_2 = sbs_nb_2.copy()
sbs_nb_2['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_2.head()

# 3 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=3,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_3 = df_transformed.loc[:, selected_features]
sbs_nb_3 = sbs_nb_3.copy()
sbs_nb_3['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_3.head()

# 4 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=4,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_4 = df_transformed.loc[:, selected_features]
sbs_nb_4 = sbs_nb_4.copy()
sbs_nb_4['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_4.head()

# 5 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=5,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_5 = df_transformed.loc[:, selected_features]
sbs_nb_5 = sbs_nb_5.copy()
sbs_nb_5['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_5.head()

# 6 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=6,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_6 = df_transformed.loc[:, selected_features]
sbs_nb_6 = sbs_nb_6.copy()
sbs_nb_6['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_6.head()

# 7 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=7,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_7 = df_transformed.loc[:, selected_features]
sbs_nb_7 = sbs_nb_7.copy()
sbs_nb_7['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_7.head()

# 8 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=8,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_8 = df_transformed.loc[:, selected_features]
sbs_nb_8 = sbs_nb_8.copy()
sbs_nb_8['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_8.head()

# 9 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=9,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_9 = df_transformed.loc[:, selected_features]
sbs_nb_9 = sbs_nb_9.copy()
sbs_nb_9['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_9.head()

# 10 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=10,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_10 = df_transformed.loc[:, selected_features]
sbs_nb_10 = sbs_nb_10.copy()
sbs_nb_10['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_10.head()

# 11 Fitur

# Create a Naive Bayes model
nb = GaussianNB()

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(nb,
                   k_features=11,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_nb_11 = df_transformed.loc[:, selected_features]
sbs_nb_11 = sbs_nb_11.copy()
sbs_nb_11['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_nb_11.head()

"""## Logistic Regresion

### SFS
"""

# 1 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=1,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_1 = df_transformed.loc[:, selected_features]
sfs_logreg_1 = sfs_logreg_1.copy()
sfs_logreg_1['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_1.head()

# 2 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=2,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_2 = df_transformed.loc[:, selected_features]
sfs_logreg_2 = sfs_logreg_2.copy()
sfs_logreg_2['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_2.head()

# 3 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=3,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_3 = df_transformed.loc[:, selected_features]
sfs_logreg_3 = sfs_logreg_3.copy()
sfs_logreg_3['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_3.head()

# 4 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=4,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_4 = df_transformed.loc[:, selected_features]
sfs_logreg_4 = sfs_logreg_4.copy()
sfs_logreg_4['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_4.head()

# 5 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=5,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_5 = df_transformed.loc[:, selected_features]
sfs_logreg_5 = sfs_logreg_5.copy()
sfs_logreg_5['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_5.head()

# 6 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=6,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_6 = df_transformed.loc[:, selected_features]
sfs_logreg_6 = sfs_logreg_6.copy()
sfs_logreg_6['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_6.head()

# 7 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=7,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_7 = df_transformed.loc[:, selected_features]
sfs_logreg_7 = sfs_logreg_7.copy()
sfs_logreg_7['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_7.head()

# 8 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=8,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_8 = df_transformed.loc[:, selected_features]
sfs_logreg_8 = sfs_logreg_8.copy()
sfs_logreg_8['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_8.head()

# 9 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=9,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_9 = df_transformed.loc[:, selected_features]
sfs_logreg_9 = sfs_logreg_9.copy()
sfs_logreg_9['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_9.head()

# 10 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=10,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_10 = df_transformed.loc[:, selected_features]
sfs_logreg_10 = sfs_logreg_10.copy()
sfs_logreg_10['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_10.head()

# 11 Fitur

# Create a Logistic Regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Forward Selection (SFS)
sfs_forward = SFS(log_reg,
                  k_features=11,
                  forward=True,
                  floating=False,
                  scoring='accuracy',
                  cv=5)

sfs_forward = sfs_forward.fit(X_train, y_train)

# Get selected feature names
sfs_forward_selected_features = list(sfs_forward.k_feature_names_)

print("SFS Forward selected features:", sfs_forward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_forward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sfs_logreg_11 = df_transformed.loc[:, selected_features]
sfs_logreg_11 = sfs_logreg_11.copy()
sfs_logreg_11['Accident_severity'] = y

# Display the head of the transformed dataset
sfs_logreg_11.head()

"""### SBS"""

# 1 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=1,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_1 = df_transformed.loc[:, selected_features]
sbs_logreg_1 = sbs_logreg_1.copy()
sbs_logreg_1['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_1.head()

# 2 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=2,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_2 = df_transformed.loc[:, selected_features]
sbs_logreg_2 = sbs_logreg_2.copy()
sbs_logreg_2['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_2.head()

# 3 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=3,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_3 = df_transformed.loc[:, selected_features]
sbs_logreg_3 = sbs_logreg_3.copy()
sbs_logreg_3['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_3.head()

# 4 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=4,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_4 = df_transformed.loc[:, selected_features]
sbs_logreg_4 = sbs_logreg_4.copy()
sbs_logreg_4['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_4.head()

# 5 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=5,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_5 = df_transformed.loc[:, selected_features]
sbs_logreg_5 = sbs_logreg_5.copy()
sbs_logreg_5['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_5.head()

# 6 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=6,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_6 = df_transformed.loc[:, selected_features]
sbs_logreg_6 = sbs_logreg_6.copy()
sbs_logreg_6['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_6.head()

# 7 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=7,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_7 = df_transformed.loc[:, selected_features]
sbs_logreg_7 = sbs_logreg_7.copy()
sbs_logreg_7['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_7.head()

# 8 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=8,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_8 = df_transformed.loc[:, selected_features]
sbs_logreg_8 = sbs_logreg_8.copy()
sbs_logreg_8['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_8.head()

# 9 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=9,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_9 = df_transformed.loc[:, selected_features]
sbs_logreg_9 = sbs_logreg_9.copy()
sbs_logreg_9['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_9.head()

# 10 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=10,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_10 = df_transformed.loc[:, selected_features]
sbs_logreg_10 = sbs_logreg_10.copy()
sbs_logreg_10['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_10.head()

# 11 Fitur

# Define the logistic regression model
log_reg = LogisticRegression(max_iter=10000)

# Perform Sequential Backward Selection (SBS)
sfs_backward = SFS(log_reg,
                   k_features=11,
                   forward=False,
                   floating=False,
                   scoring='accuracy',
                   cv=5)

sfs_backward = sfs_backward.fit(X_train, y_train)

# Get selected feature names
sfs_backward_selected_features = list(sfs_backward.k_feature_names_)

print("SFS Backward selected features:", sfs_backward_selected_features)

# Transform dataset based on selected features from one of the methods
selected_features = sfs_backward_selected_features

# Create a new DataFrame with the selected features and add the target variable
sbs_logreg_11 = df_transformed.loc[:, selected_features]
sbs_logreg_11 = sbs_logreg_11.copy()
sbs_logreg_11['Accident_severity'] = y

# Display the head of the transformed dataset
sbs_logreg_11.head()

"""# Algoritma Klasifikasi

## XGBoost

### Original Data
"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_1.drop('Accident_severity', axis=1)
y = sfs_xgbc_1['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_2.drop('Accident_severity', axis=1)
y = sfs_xgbc_2['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_3.drop('Accident_severity', axis=1)
y = sfs_xgbc_3['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_4.drop('Accident_severity', axis=1)
y = sfs_xgbc_4['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_5.drop('Accident_severity', axis=1)
y = sfs_xgbc_5['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_6.drop('Accident_severity', axis=1)
y = sfs_xgbc_6['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_7.drop('Accident_severity', axis=1)
y = sfs_xgbc_7['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_8.drop('Accident_severity', axis=1)
y = sfs_xgbc_8['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_9.drop('Accident_severity', axis=1)
y = sfs_xgbc_9['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_10.drop('Accident_severity', axis=1)
y = sfs_xgbc_10['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_11.drop('Accident_severity', axis=1)
y = sfs_xgbc_11['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_1.drop('Accident_severity', axis=1)
y = sfs_xgbc_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_2.drop('Accident_severity', axis=1)
y = sfs_xgbc_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_3.drop('Accident_severity', axis=1)
y = sfs_xgbc_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_4.drop('Accident_severity', axis=1)
y = sfs_xgbc_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_5.drop('Accident_severity', axis=1)
y = sfs_xgbc_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_6.drop('Accident_severity', axis=1)
y = sfs_xgbc_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_7.drop('Accident_severity', axis=1)
y = sfs_xgbc_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_8.drop('Accident_severity', axis=1)
y = sfs_xgbc_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_9.drop('Accident_severity', axis=1)
y = sfs_xgbc_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_10.drop('Accident_severity', axis=1)
y = sfs_xgbc_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_xgbc_11.drop('Accident_severity', axis=1)
y = sfs_xgbc_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_1.drop('Accident_severity', axis=1)
y = sbs_xgb_1['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_2.drop('Accident_severity', axis=1)
y = sbs_xgb_2['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_3.drop('Accident_severity', axis=1)
y = sbs_xgb_3['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_4.drop('Accident_severity', axis=1)
y = sbs_xgb_4['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_5.drop('Accident_severity', axis=1)
y = sbs_xgb_5['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_6.drop('Accident_severity', axis=1)
y = sbs_xgb_6['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_7.drop('Accident_severity', axis=1)
y = sbs_xgb_7['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_8.drop('Accident_severity', axis=1)
y = sbs_xgb_8['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_9.drop('Accident_severity', axis=1)
y = sbs_xgb_9['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_10.drop('Accident_severity', axis=1)
y = sbs_xgb_10['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_11.drop('Accident_severity', axis=1)
y = sbs_xgb_11['Accident_severity']

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_1.drop('Accident_severity', axis=1)
y = sbs_xgb_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_2.drop('Accident_severity', axis=1)
y = sbs_xgb_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_3.drop('Accident_severity', axis=1)
y = sbs_xgb_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_4.drop('Accident_severity', axis=1)
y = sbs_xgb_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_5.drop('Accident_severity', axis=1)
y = sbs_xgb_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_6.drop('Accident_severity', axis=1)
y = sbs_xgb_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_7.drop('Accident_severity', axis=1)
y = sbs_xgb_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_8.drop('Accident_severity', axis=1)
y = sbs_xgb_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_9.drop('Accident_severity', axis=1)
y = sbs_xgb_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_10.drop('Accident_severity', axis=1)
y = sbs_xgb_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_xgb_11.drop('Accident_severity', axis=1)
y = sbs_xgb_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model XGBoost
model = XGBClassifier(random_state=42, use_label_encoder=False, eval_metric='mlogloss')

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""## Random Forest

### Original Data
"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = df['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Perhitungan Cross-Validation
cv_scores = cross_val_score(model, X_resampled, y_resampled, cv=5, scoring='accuracy')
print("\nCross-Validation Scores:", cv_scores)
print("Mean Cross-Validation Score:", np.mean(cv_scores))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SFS"""

# 1 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_rf_1.drop('Accident_severity', axis=1)
y = sfs_rf_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_2.drop('Accident_severity', axis=1)
y = sfs_rf_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_3.drop('Accident_severity', axis=1)
y = sfs_rf_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_4.drop('Accident_severity', axis=1)
y = sfs_rf_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_5.drop('Accident_severity', axis=1)
y = sfs_rf_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_6.drop('Accident_severity', axis=1)
y = sfs_rf_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_7.drop('Accident_severity', axis=1)
y = sfs_rf_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_8.drop('Accident_severity', axis=1)
y = sfs_rf_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_9.drop('Accident_severity', axis=1)
y = sfs_rf_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_10.drop('Accident_severity', axis=1)
y = sfs_rf_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_11.drop('Accident_severity', axis=1)
y = sfs_rf_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_1.drop('Accident_severity', axis=1)
y = sfs_rf_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_2.drop('Accident_severity', axis=1)
y = sfs_rf_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_3.drop('Accident_severity', axis=1)
y = sfs_rf_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_4.drop('Accident_severity', axis=1)
y = sfs_rf_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_5.drop('Accident_severity', axis=1)
y = sfs_rf_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_6.drop('Accident_severity', axis=1)
y = sfs_rf_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_7.drop('Accident_severity', axis=1)
y = sfs_rf_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_8.drop('Accident_severity', axis=1)
y = sfs_rf_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_9.drop('Accident_severity', axis=1)
y = sfs_rf_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_10.drop('Accident_severity', axis=1)
y = sfs_rf_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_rf_11.drop('Accident_severity', axis=1)
y = sfs_rf_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_1.drop('Accident_severity', axis=1)
y = sbs_rf_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_2.drop('Accident_severity', axis=1)
y = sbs_rf_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_3.drop('Accident_severity', axis=1)
y = sbs_rf_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_4.drop('Accident_severity', axis=1)
y = sbs_rf_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_5.drop('Accident_severity', axis=1)
y = sbs_rf_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_6.drop('Accident_severity', axis=1)
y = sbs_rf_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_7.drop('Accident_severity', axis=1)
y = sbs_rf_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_8.drop('Accident_severity', axis=1)
y = sbs_rf_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_9.drop('Accident_severity', axis=1)
y = sbs_rf_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_10.drop('Accident_severity', axis=1)
y = sbs_rf_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_11.drop('Accident_severity', axis=1)
y = sbs_rf_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_1.drop('Accident_severity', axis=1)
y = sbs_rf_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_2.drop('Accident_severity', axis=1)
y = sbs_rf_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_3.drop('Accident_severity', axis=1)
y = sbs_rf_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_4.drop('Accident_severity', axis=1)
y = sbs_rf_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_5.drop('Accident_severity', axis=1)
y = sbs_rf_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_6.drop('Accident_severity', axis=1)
y = sbs_rf_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_7.drop('Accident_severity', axis=1)
y = sbs_rf_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_8.drop('Accident_severity', axis=1)
y = sbs_rf_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_9.drop('Accident_severity', axis=1)
y = sbs_rf_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_10.drop('Accident_severity', axis=1)
y = sbs_rf_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_rf_11.drop('Accident_severity', axis=1)
y = sbs_rf_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""## Decision Tree

### Original Data
"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = df['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_1.drop('Accident_severity', axis=1)
y = sfs_dt_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_2.drop('Accident_severity', axis=1)
y = sfs_dt_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_3.drop('Accident_severity', axis=1)
y = sfs_dt_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_4.drop('Accident_severity', axis=1)
y = sfs_dt_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_5.drop('Accident_severity', axis=1)
y = sfs_dt_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_6.drop('Accident_severity', axis=1)
y = sfs_dt_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_7.drop('Accident_severity', axis=1)
y = sfs_dt_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_8.drop('Accident_severity', axis=1)
y = sfs_dt_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_9.drop('Accident_severity', axis=1)
y = sfs_dt_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_10.drop('Accident_severity', axis=1)
y = sfs_dt_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_11.drop('Accident_severity', axis=1)
y = sfs_dt_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_1.drop('Accident_severity', axis=1)
y = sfs_dt_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_2.drop('Accident_severity', axis=1)
y = sfs_dt_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_3.drop('Accident_severity', axis=1)
y = sfs_dt_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_4.drop('Accident_severity', axis=1)
y = sfs_dt_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_5.drop('Accident_severity', axis=1)
y = sfs_dt_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_6.drop('Accident_severity', axis=1)
y = sfs_dt_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_7.drop('Accident_severity', axis=1)
y = sfs_dt_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_8.drop('Accident_severity', axis=1)
y = sfs_dt_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_9.drop('Accident_severity', axis=1)
y = sfs_dt_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_10.drop('Accident_severity', axis=1)
y = sfs_dt_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_dt_11.drop('Accident_severity', axis=1)
y = sfs_dt_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_1.drop('Accident_severity', axis=1)
y = sbs_dt_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_2.drop('Accident_severity', axis=1)
y = sbs_dt_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_3.drop('Accident_severity', axis=1)
y = sbs_dt_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_4.drop('Accident_severity', axis=1)
y = sbs_dt_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_5.drop('Accident_severity', axis=1)
y = sbs_dt_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_6.drop('Accident_severity', axis=1)
y = sbs_dt_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_7.drop('Accident_severity', axis=1)
y = sbs_dt_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_8.drop('Accident_severity', axis=1)
y = sbs_dt_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_9.drop('Accident_severity', axis=1)
y = sbs_dt_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_10.drop('Accident_severity', axis=1)
y = sbs_dt_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_11.drop('Accident_severity', axis=1)
y = sbs_dt_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""### Resampled Data dengan SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_1.drop('Accident_severity', axis=1)
y = sbs_dt_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_2.drop('Accident_severity', axis=1)
y = sbs_dt_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_3.drop('Accident_severity', axis=1)
y = sbs_dt_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_4.drop('Accident_severity', axis=1)
y = sbs_dt_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_5.drop('Accident_severity', axis=1)
y = sbs_dt_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_6.drop('Accident_severity', axis=1)
y = sbs_dt_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_7.drop('Accident_severity', axis=1)
y = sbs_dt_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_8.drop('Accident_severity', axis=1)
y = sbs_dt_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_9.drop('Accident_severity', axis=1)
y = sbs_dt_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_10.drop('Accident_severity', axis=1)
y = sbs_dt_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_dt_11.drop('Accident_severity', axis=1)
y = sbs_dt_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Decision Tree
model = DecisionTreeClassifier(random_state=42)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Feature Importances
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]
features = X.columns

# Menampilkan hasil feature importances
print("\nFeature Importances:")
for i in range(len(features)):
    print(f"{features[indices[i]]}: {importances[indices[i]]}")

plt.figure(figsize=(12, 8))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), features[indices], rotation=90)
plt.xlim([-1, X.shape[1]])
plt.show()

"""## Naive Baiyes

### Original Data
"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = df['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_1['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_2['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_3['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_4['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_5['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_6['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_7['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_8['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_9['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_10['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = chi2_11['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_1.drop('Accident_severity', axis=1)
y = sfs_nb_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_2.drop('Accident_severity', axis=1)
y = sfs_nb_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_3.drop('Accident_severity', axis=1)
y = sfs_nb_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_4.drop('Accident_severity', axis=1)
y = sfs_nb_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_nb_5.drop('Accident_severity', axis=1)
y = sfs_nb_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_6.drop('Accident_severity', axis=1)
y = sfs_nb_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_7.drop('Accident_severity', axis=1)
y = sfs_nb_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_8.drop('Accident_severity', axis=1)
y = sfs_nb_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_9.drop('Accident_severity', axis=1)
y = sfs_nb_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_10.drop('Accident_severity', axis=1)
y = sfs_nb_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_11.drop('Accident_severity', axis=1)
y = sfs_nb_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_1.drop('Accident_severity', axis=1)
y = sfs_nb_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_2.drop('Accident_severity', axis=1)
y = sfs_nb_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_3.drop('Accident_severity', axis=1)
y = sfs_nb_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_4.drop('Accident_severity', axis=1)
y = sfs_nb_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_5.drop('Accident_severity', axis=1)
y = sfs_nb_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_6.drop('Accident_severity', axis=1)
y = sfs_nb_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_7.drop('Accident_severity', axis=1)
y = sfs_nb_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_8.drop('Accident_severity', axis=1)
y = sfs_nb_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_9.drop('Accident_severity', axis=1)
y = sfs_nb_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_10.drop('Accident_severity', axis=1)
y = sfs_nb_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_nb_11.drop('Accident_severity', axis=1)
y = sfs_nb_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_1.drop('Accident_severity', axis=1)
y = sbs_nb_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_2.drop('Accident_severity', axis=1)
y = sbs_nb_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_3.drop('Accident_severity', axis=1)
y = sbs_nb_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_4.drop('Accident_severity', axis=1)
y = sbs_nb_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_5.drop('Accident_severity', axis=1)
y = sbs_nb_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_6.drop('Accident_severity', axis=1)
y = sbs_nb_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_7.drop('Accident_severity', axis=1)
y = sbs_nb_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_8.drop('Accident_severity', axis=1)
y = sbs_nb_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_9.drop('Accident_severity', axis=1)
y = sbs_nb_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_10.drop('Accident_severity', axis=1)
y = sbs_nb_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_11.drop('Accident_severity', axis=1)
y = sbs_nb_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_1.drop('Accident_severity', axis=1)
y = sbs_nb_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_2.drop('Accident_severity', axis=1)
y = sbs_nb_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_1.drop('Accident_severity', axis=1)
y = sbs_nb_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_4.drop('Accident_severity', axis=1)
y = sbs_nb_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_5.drop('Accident_severity', axis=1)
y = sbs_nb_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_6.drop('Accident_severity', axis=1)
y = sbs_nb_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_7.drop('Accident_severity', axis=1)
y = sbs_nb_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_8.drop('Accident_severity', axis=1)
y = sbs_nb_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sbs_nb_9.drop('Accident_severity', axis=1)
y = sbs_nb_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_10.drop('Accident_severity', axis=1)
y = sbs_nb_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_nb_11.drop('Accident_severity', axis=1)
y = sbs_nb_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Naive Bayes
model = GaussianNB()

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""## Logistic Regression

### Original Data
"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)  # Ganti 'target_column' dengan nama kolom target
y = df['Accident_severity']  # Ganti 'target_column' dengan nama kolom target

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data"""

# Membaca data dari file CSV
df = pd.read_csv('transformed_data.csv')

# Menentukan fitur (features) dan label (target)
X = df.drop('Accident_severity', axis=1)
y = df['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan Chi2"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_1.drop('Accident_severity', axis=1)
y = chi2_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_2.drop('Accident_severity', axis=1)
y = chi2_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_3.drop('Accident_severity', axis=1)
y = chi2_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_4.drop('Accident_severity', axis=1)
y = chi2_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_5.drop('Accident_severity', axis=1)
y = chi2_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_6.drop('Accident_severity', axis=1)
y = chi2_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_7.drop('Accident_severity', axis=1)
y = chi2_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_8.drop('Accident_severity', axis=1)
y = chi2_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_9.drop('Accident_severity', axis=1)
y = chi2_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_10.drop('Accident_severity', axis=1)
y = chi2_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = chi2_11.drop('Accident_severity', axis=1)
y = chi2_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_1.drop('Accident_severity', axis=1)
y = sfs_logreg_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_2.drop('Accident_severity', axis=1)
y = sfs_logreg_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_3.drop('Accident_severity', axis=1)
y = sfs_logreg_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_4.drop('Accident_severity', axis=1)
y = sfs_logreg_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_5.drop('Accident_severity', axis=1)
y = sfs_logreg_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_6.drop('Accident_severity', axis=1)
y = sfs_logreg_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_7.drop('Accident_severity', axis=1)
y = sfs_logreg_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_8.drop('Accident_severity', axis=1)
y = sfs_logreg_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_9.drop('Accident_severity', axis=1)
y = sfs_logreg_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_10.drop('Accident_severity', axis=1)
y = sfs_logreg_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_11.drop('Accident_severity', axis=1)
y = sfs_logreg_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan SFS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_1.drop('Accident_severity', axis=1)
y = sfs_logreg_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_2.drop('Accident_severity', axis=1)
y = sfs_logreg_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_3.drop('Accident_severity', axis=1)
y = sfs_logreg_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_4.drop('Accident_severity', axis=1)
y = sfs_logreg_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_5.drop('Accident_severity', axis=1)
y = sfs_logreg_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_6.drop('Accident_severity', axis=1)
y = sfs_logreg_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_7.drop('Accident_severity', axis=1)
y = sfs_logreg_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_8.drop('Accident_severity', axis=1)
y = sfs_logreg_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_9.drop('Accident_severity', axis=1)
y = sfs_logreg_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_10.drop('Accident_severity', axis=1)
y = sfs_logreg_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from imblearn.over_sampling import SMOTE

# Menentukan fitur (features) dan label (target)
X = sfs_logreg_11.drop('Accident_severity', axis=1)
y = sfs_logreg_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Grafik Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_1.drop('Accident_severity', axis=1)
y = sbs_logreg_1['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_2.drop('Accident_severity', axis=1)
y = sbs_logreg_2['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_3.drop('Accident_severity', axis=1)
y = sbs_logreg_3['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_4.drop('Accident_severity', axis=1)
y = sbs_logreg_4['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_5.drop('Accident_severity', axis=1)
y = sbs_logreg_5['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_6.drop('Accident_severity', axis=1)
y = sbs_logreg_6['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_7.drop('Accident_severity', axis=1)
y = sbs_logreg_7['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_8.drop('Accident_severity', axis=1)
y = sbs_logreg_8['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_9.drop('Accident_severity', axis=1)
y = sbs_logreg_9['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_10.drop('Accident_severity', axis=1)
y = sbs_logreg_10['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_11.drop('Accident_severity', axis=1)
y = sbs_logreg_11['Accident_severity']

# Pembagian data menjadi data pelatihan dan data pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model pada data pelatihan
model.fit(X_train, y_train)

# Melakukan prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""### Resampled Data dengan SBS"""

# 1 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_1.drop('Accident_severity', axis=1)
y = sbs_logreg_1['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 2 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_2.drop('Accident_severity', axis=1)
y = sbs_logreg_2['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 3 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_3.drop('Accident_severity', axis=1)
y = sbs_logreg_3['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 4 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_4.drop('Accident_severity', axis=1)
y = sbs_logreg_4['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 5 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_5.drop('Accident_severity', axis=1)
y = sbs_logreg_5['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 6 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_6.drop('Accident_severity', axis=1)
y = sbs_logreg_6['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 7 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_7.drop('Accident_severity', axis=1)
y = sbs_logreg_7['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 8 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_8.drop('Accident_severity', axis=1)
y = sbs_logreg_8['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 9 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_9.drop('Accident_severity', axis=1)
y = sbs_logreg_9['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 10 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_10.drop('Accident_severity', axis=1)
y = sbs_logreg_10['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# 11 Fitur

# Menentukan fitur (features) dan label (target)
X = sbs_logreg_11.drop('Accident_severity', axis=1)
y = sbs_logreg_11['Accident_severity']

# Resampling dengan SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Membagi data resampled menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Inisialisasi model Logistic Regression
model = LogisticRegression(random_state=42, max_iter=1000)

# Melatih model
model.fit(X_train, y_train)

# Membuat prediksi pada data uji
y_pred = model.predict(X_test)

# Evaluasi kinerja model pada data uji
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)

print("Akurasi:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

print("\nLaporan Klasifikasi:")
print(classification_report(y_test, y_pred, zero_division=0))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)

# Plot confusion matrix
plt.figure(figsize=(10, 7))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()